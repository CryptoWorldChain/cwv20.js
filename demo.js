const chain=require('./dist/brewchain.js');
const fs=require('fs');
var rp = require('request-promise')
//set testnet network type
chain.config.server_base='http://43.254.1.176:8000/fbs';
chain.config.rpc_provider = rp;


// hexPrikey: '7f38bce241536c1725b2179e5d59328c04e7735f8fbfccb7acf33cf05cacf6fc',
// hexPubkey: '950ac202790ea5a2b2d008445f7effae5e1ec2a13a6fc748c1d25fc3dfc2ab55137a385d18813032ff96c8aa6612eabb8a44bd9ac16e7e2976b0bfbf4cf493e6',
// hexAddress: 'fbcbd881eae57ae3542dc1baa2dc6e68ec9ce18a',

// var kp=chain.KeyPair.genRandomKey();
// console.log(kp);

var kp = chain.KeyPair.genFromPrikey('c7626b024aee1604e38e34a742c6131b0b9d2449326f9fbcf9c60a2964c96fab')
// var kp = cwv.KeyPair.genFromPrikey('6b5e7ff06889bd3acea83d81a79eccef5cc0c02d2085fe70d07f6257fc3d0eec')
// var kp=cwv.KeyPair.genRandomKey();
// var kp = cwv.KeyPair.genFromPrikey('fa626690bf525b4652e03be9a8bea4d807c4ae56102904b06fd8ed19b2e7138e')
kp.nonce=5;
var from={
    keypair:kp
}


console.log(from)

// chain.rpc.getBalance('9a82cd3be67c011aca4a03040261b856185f0228').then(function(result){
//     console.log(result);
// }).catch(function (err) {
//     console.log(err)
// });
// var args=[{"address":"a5c31be225011ee6ecceaf3b9b3696db01a20d6c","amount":"0"}]
// chain.rpc.transfer(from,args).then(function(result){
//     console.log(result)
// })
// console.log(chain.rpc.sign(from,args))

// chain.rpc.getTransaction('c5a807a17a9c85d8d1895aa92bf94ba35ceb8b80a039110804531e06bfcfbe34a6').then(function(result){
//     console.log(result)
// })


var cvm = "608060405234801561001057600080fd5b506103bb806100206000396000f30060806040526004361061004c576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063549262ba14610051578063b6588ffd14610068575b600080fd5b34801561005d57600080fd5b5061006661007f565b005b34801561007457600080fd5b5061007d6101a5565b005b60016040519080825280601f01601f1916602001820160405280156100b35781602001602082028038833980820191505090505b50600090805190602001906100c992919061021b565b5060017f010000000000000000000000000000000000000000000000000000000000000002600080815460018160011615610100020316600290048110151561010e57fe5b81546001161561012d5790600052602060002090602091828204019190065b601f036101000a81548160ff021916907f01000000000000000000000000000000000000000000000000000000000000008404021790555060018081905550600060026000600154815260200190815260200160002090805460018160011615610100020316600290046101a292919061029b565b50565b60006040519080825280601f01601f1916602001820160405280156101d95781602001602082028038833980820191505090505b50600090805190602001906101ef92919061021b565b50600060018190555060026000600154815260200190815260200160002060006102199190610322565b565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061025c57805160ff191683800117855561028a565b8280016001018555821561028a579182015b8281111561028957825182559160200191906001019061026e565b5b509050610297919061036a565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106102d45780548555610311565b8280016001018555821561031157600052602060002091601f016020900482015b828111156103105782548255916001019190600101906102f5565b5b50905061031e919061036a565b5090565b50805460018160011615610100020316600290046000825580601f106103485750610367565b601f016020900490600052602060002090810190610366919061036a565b5b50565b61038c91905b80821115610388576000816000905550600101610370565b5090565b905600a165627a7a723058205fd1e9e6ca31a58972c0187a28d79f542e594dd42f5415a794289b07b66ad97d0029";
args={"data":cvm};
chain.rpc.createContract(from,args).then(function(result){
    console.log("cvm:"+result)
}).catch(function(error){
    console.log("error==="+error);
})

// args={"tos":["a5c31be225011ee6ecceaf3b9b3696db01a20d6c"], "values":["0"],"name":"a","symbol":"a","decimals":12,"ext_datas":{"c":"2"}} 
// chain.rpc.publicToken(from,args).then(function(result){
//     console.log(result);
// }).catch(function(error){
//     console.log("error==="+error);
// })


// String hexStr = "706172616d6574657220696e76616c69642c2073656e646572206e6f6e6365206973206c61726765207468616e207472616e73616374696f6e206e6f6e6365";
//   byte[] bytes = crypto.hexStrToBytes(hexStr);
//   String str= new String(bytes);
//   System.out.println(str);


var hex='706172616d6574657220696e76616c69642c2073656e646572206e6f6e6365206973206c61726765207468616e207472616e73616374696f6e206e6f6e6365';
hex='0x436f6e7472616374457865634572726f72';
// 16进制转字符串
function hex2str(hex) {
　　var trimedStr = hex.trim();
　　var rawStr = trimedStr.substr(0,2).toLowerCase() === "0x" ? trimedStr.substr(2) : trimedStr;
　　var len = rawStr.length;
　　if(len % 2 !== 0) {
　　　　alert("Illegal Format ASCII Code!");
　　　　return "";
　　}
　　var curCharCode;
　　var resultStr = [];
　　for(var i = 0; i < len;i = i + 2) {
　　　　curCharCode = parseInt(rawStr.substr(i, 2), 16);
　　　　resultStr.push(String.fromCharCode(curCharCode));
　　}
　　return resultStr.join("");
}
// console.log(hex2str(hex));